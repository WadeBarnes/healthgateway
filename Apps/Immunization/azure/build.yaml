name: 1.1.0$(Rev:.r) #Build number

#Build variables
variables:
    App.Name: Immunization
    FunctionalTests: false
    App.Home: $(Build.SourcesDirectory)/Apps/$(App.Name)
    OpenShift.Name: $[lower(variables['App.Name'])]
    App.UnitTests: $(App.Home)/test/unit
    App.FunctionalTests: $(App.Home)/test/functional
    PullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]
    PublishFunctionalTests: $[and(eq(variables['FunctionalTests'],true), eq(variables['PullRequest'],false))]
    ${{ if eq(variables['PullRequest'], true) }}: 
        BuildPrefix: "PR-$(SourceBranchName)"
    ${{ if eq(variables['PullRequest'], false) }}: 
        BuildPrefix: "$(SourceBranchName)"

pr:
    branches:
        include:
        - dev
    paths:
        include:
        - Apps/Immunization     # Should be set to App.Name
        - Apps/Common
        - Apps/Database

trigger:
    batch: "true"
    branches:
        include:
        - dev
    paths:
        include:
        - Apps/Immunization     # Should be set to App.Name
        - Apps/Common
        - Apps/Database

pool:
    name: "HealthGateway"

steps:
    - task: DotNetCoreCLI@2
      displayName: "Runing Unit Tests for $(App.Name)"
      inputs:
          command: "test"
          projects: "$(App.Home)/test/unit/$(App.Name)Tests.csproj"
          arguments: "/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura"
          testRunTitle: "$(App.Name): Performing Unit Tests"

    - script: |
          set -e
          reportgenerator -reports:$(App.Home)/test/**/coverage.cobertura.xml -targetdir:$(App.Home)/CodeCoverage -reporttypes:"HtmlInline_AzurePipelines;Cobertura"
      displayName: "Create Code Coverage Report for $(App.Name)"

    - task: PublishCodeCoverageResults@1
      displayName: "Publishing Code Coverage for $(App.Name)"
      inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "$(App.Home)/CodeCoverage/Cobertura.xml"
          pathToSources: "$(App.Home)/src"
          reportDirectory: "$(App.Home)/CodeCoverage"

    - task: DotNetCoreCLI@2
      displayName: "Publishing code for $(App.Name)"
      inputs:
          modifyOutputPath: false
          command: "publish"
          publishWebProjects: false
          projects: "$(App.Home)/src"
          arguments: "-o $(Build.BinariesDirectory)"
          zipAfterPublish: false

    - script: |
          set -e
          cp $(App.Home)/Dockerfile $(Build.BinariesDirectory)
          oc process -f $(Build.SourcesDirectory)/Tools/BaseBuild/build.yaml -p NAME=$(OpenShift.Name) | oc apply -f -
          oc start-build $(OpenShift.Name) --wait --follow --from-dir $(Build.BinariesDirectory) 
          oc tag $(OpenShift.Name):latest $(OpenShift.Name):$(Build.BuildNumber)
          echo `date` > $(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).txt
      displayName: "Build OpenShift Image for $(App.Name) and pushing to Image Stream"
      condition: and(succeeded(), eq(variables['PullRequest'], false))
    
    - task: CopyFiles@2
      displayName: "Copy Functional Tests to Staging for $(App.Name)"
      condition: and(succeeded(), eq(variables['PublishFunctionalTests'], true))
      inputs:
          SourceFolder: "$(App.FunctionalTests)"
          Contents: "**"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

    - task: PublishPipelineArtifact@0
      displayName: "Publish Pipeline Artifact for $(App.Name)"
      condition: and(succeeded(), eq(variables['PublishFunctionalTests'], true))
      inputs:
          targetPath: "$(Build.ArtifactStagingDirectory)"