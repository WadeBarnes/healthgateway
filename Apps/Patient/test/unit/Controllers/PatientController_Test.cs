//-------------------------------------------------------------------------
// Copyright Â© 2019 Province of British Columbia
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//-------------------------------------------------------------------------
// <auto-generated />
namespace HealthGateway.Patient.Test.Controllers
{
    using Xunit;
    using Moq;
    using DeepEqual.Syntax;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Http;
    using HealthGateway.Common.Models;
    using Microsoft.Extensions.Logging;
    using HealthGateway.Common.Services;
    using HealthGateway.Patient.Controllers;
    using System;

    public class PatientController_Test
    {
        private const int mockedPatientsCount = 10;
        private const string mockedHdId = "mockedHdId";
        private const string mockedEmailAddress = "mockedEmailAddress"; 
        private const string mockedFirstName = "mockedFirstName";
        private const string mockedLastName = "mockedLastName";
        private const string mockedGender = "Male";
        private const string mockedPersonalHealthNumber = "mockedPersonalHealthNumber";

        private Mock<IPatientService> patientService;
        private PatientController patientController;

        public PatientController_Test()
        {
        }

        private RequestResult<PatientModel> SetupMocks()
        {
            patientService = new Mock<IPatientService>();
            var loggerService = new Mock<ILogger<PatientController>>();
            Mock<IHttpContextAccessor> httpContextAccessorMock = new Mock<IHttpContextAccessor>();
            var expectedResult = GenegateMockPatient();
            patientService.Setup(x => x.GetPatient(It.IsAny<string>(), Common.Constants.PatientIdentifierType.HDID)).ReturnsAsync(expectedResult);

            patientController = new PatientController(loggerService.Object, httpContextAccessorMock.Object, patientService.Object);
            return expectedResult;
        }

        [Fact]
        public void GetPatients()
        {
            var expectedResult = SetupMocks();
            var actualResult = patientController.GetPatient("123");
            Assert.IsType<JsonResult>(actualResult.Result);
            Assert.True(((JsonResult)actualResult.Result).Value.IsDeepEqual(expectedResult));
        }

        private RequestResult<PatientModel> GenegateMockPatient()
        {
            RequestResult<PatientModel> result = new RequestResult<PatientModel>();
            var patient = new PatientModel()
            {
                Birthdate = DateTime.Now,
                EmailAddress = mockedEmailAddress,
                FirstName = mockedFirstName,
                LastName = mockedLastName,
                Gender = mockedGender,
                HdId = mockedHdId,
                PersonalHealthNumber = mockedPersonalHealthNumber,
            };
            result.ResourcePayload = patient;
            return result;
        }
    }
}
